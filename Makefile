current-dir := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
SHELL = /bin/sh

help: ## show make targets
	@awk 'BEGIN {FS = ":.*?## "} /[a-zA-Z_-]+:.*?## / {sub("\\\\n",sprintf("\n%22c"," "), $$2);printf " \033[36m%-20s\033[0m  %s\n", $$1, $$2}' $(MAKEFILE_LIST)

start: install-deps config-files ## install dependencies, add githooks and create secrets

config-files: ## add githooks
	git config core.hooksPath .githooks

install-deps: ## install all dependencies of Pipfile
	@if [ -z $(shell which poetry) ]; then echo "ERROR: missing software required (pip install poetry)" > /dev/stderr && exit 1; fi
	@poetry install

install: ## install dependency, ex: make install dep=requests ver=2.26.0
	@if [ -z $(shell which poetry) ]; then echo "ERROR: missing software required (pip install poetry)" > /dev/stderr && exit 1; fi
	@poetry add $(dep)@$(ver)
	@poetry update
	@poetry install

install-dev: ## install dev dependency, ex: make install-dev dep=requests ver=2.26.0
	@if [ -z $(shell which poetry) ]; then echo "ERROR: missing software required (pip install poetry)" > /dev/stderr && exit 1; fi
	@poetry add -D $(dep)@$(ver)
	@poetry update
	@poetry install

uninstall: ## uninstall dependency, ex: make uninstall dep=requests
	@poetry remove $(dep)

start-infra: ## start local infrastructure using Docker
	@if [ -z $(shell which docker) ]; then echo "ERROR: missing software required (docker)" > /dev/stderr && exit 1; fi
	docker-compose up -d

stop-infra: ## stop local infrastructure
	@if [ -z $(shell which docker) ]; then echo "ERROR: missing software required (docker)" > /dev/stderr && exit 1; fi
	docker-compose down

run: start-infra ## run complete pipeline, ex: 'make run'
	@echo Running pipeline...
	@bash ./scripts/get_inputs.sh
	@bash -c "set -o allexport; source ./env/env.properties; source ./env/env.secrets; set +o allexport && export PYTHONPATH=app && poetry run python ./app/main.py"

format: ## run isort and black to apply format code
	@poetry run python -B -m black app/
	@poetry run python -B -m isort app/
	@poetry run	python -B -m flake8 app/


check-format: ## check the format import rules and code with isort, black, flake8
	@poetry run python -m isort --sp pyproject.toml --skip .venv . --check
	@poetry run python -m black --check .
	@poetry run python -m flake8 --exclude=.venv/

.PHONY: help start config-files install-deps install install-dev uninstall run format check-format start-infra stop-infra
