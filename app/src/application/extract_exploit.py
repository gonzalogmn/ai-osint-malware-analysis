from typing import Any, Dict, Optional

import pandas as pd
from pyExploitDb import PyExploitDb

from config.logger import logger
from src.model.cve_repository import CVERepository


class ExtractExploit:
    def __init__(self, input_repository: CVERepository, output_repository: CVERepository):
        self._input_repository = input_repository
        self._output_repository = output_repository
        self._edb_api = PyExploitDb()
        self._edb_api.debug = False
        self._edb_api.openFile()

    def __get_exploit(self, row) -> Optional[Dict[str, Any]]:
        cve_id = row["cve_id"]
        exploits = self._edb_api.searchCve(cve_id)
        if isinstance(exploits, (list, tuple)):
            return exploits[0] if len(exploits) else None
        elif isinstance(exploits, str):
            return None
        else:
            return exploits

    def __call__(self):
        logger.info("Starting ExtractExploit use case...")
        documents = self._input_repository.find_all()
        df = pd.DataFrame(documents)
        df_length = len(df)
        for index, row in df.iterrows():
            logger.info(f"Getting exploit data: {index}/{df_length}")
            output_row = self._output_repository.find_one(row["cve_id"])
            if not output_row or ("exploit" not in output_row):
                exploit = self.__get_exploit(row)
                row["exploit_id"] = exploit["id"] if exploit else ""
                row["exploit_file"] = exploit["file"] if exploit else ""
                row["exploit_description"] = exploit["description"] if exploit else ""
                row["exploit_date"] = exploit["date"] if exploit else ""
                row["exploit_author"] = exploit["author"] if exploit else ""
                row["exploit_type"] = exploit["type"] if exploit else ""
                row["exploit_platform"] = exploit["platform"] if exploit else ""
                row["exploit_port"] = exploit["port"] if exploit else ""
                row["exploit_date_updated"] = exploit["date_updated"] if exploit else ""
                row["exploit_verified"] = exploit["verified"] if exploit else ""
                row["exploit_codes"] = exploit["codes"] if exploit else ""
                row["exploit_tag"] = exploit["tags"] if exploit else ""
                row["exploit_aliases"] = exploit["aliases"] if exploit else ""
                row["exploit_app_url"] = exploit["app_url"] if exploit else ""
                row["exploit_src_url"] = exploit["src_url"] if exploit else ""
                cve = row.to_dict()
                self._output_repository.update_exploit(cve)
                logger.debug(f"{row['cve_id']} saved with 'exploit' information")
            else:
                logger.debug(f"{row['cve_id']} has already a 'exploit' information")
