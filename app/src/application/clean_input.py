from datetime import datetime

import pandas as pd

from config.logger import logger
from src.model.cve_repository import CVERepository


class CleanInput:
    def __init__(self, input_repository: CVERepository, output_repository: CVERepository):
        self._input_repository = input_repository
        self._output_repository = output_repository

    def __call__(self):
        logger.info("Starting CleanInput use case...")
        documents = self._input_repository.find_all()
        df = pd.DataFrame(documents)

        df.dropna(subset=["cve_id"], inplace=True)
        df.dropna(subset=["date_published"], inplace=True)

        converted_dates = []
        for index, row in df.iterrows():
            date_published = row["date_published"]
            if "T" in date_published and "Z" in date_published:
                if "." in date_published:
                    # Parse the ISO 8601 format with microseconds and 'Z'
                    dt = datetime.strptime(date_published, "%Y-%m-%dT%H:%M:%S.%fZ")
                    formatted_datetime = dt.strftime("%Y-%m-%d %H:%M:%S")
                else:
                    dt = datetime.strptime(date_published, "%Y-%m-%dT%H:%M:%SZ")
                    formatted_datetime = dt.strftime("%Y-%m-%d %H:%M:%S")
            elif "T" in date_published and "Z" not in date_published:
                # Parse the ISO 8601 format with microseconds and 'Z'
                dt = datetime.strptime(date_published, "%Y-%m-%dT%H:%M:%S")
                formatted_datetime = dt.strftime("%Y-%m-%d %H:%M:%S")
            else:
                try:
                    dt = datetime.strptime(date_published, "%Y-%m-%d %H:%M:%S")
                    formatted_datetime = dt.strftime("%Y-%m-%d %H:%M:%S")
                except ValueError:
                    raise ValueError("Unrecognized datetime format")
            converted_dates.append(formatted_datetime)

        df["date_published"] = converted_dates

        try:
            df["date_published"] = pd.to_datetime(df["date_published"], errors="coerce")

        except Exception as e:
            logger.error("An error occurred:", e)

        non_datetime_values = df[df["date_published"].isna()]["date_published"]

        if not non_datetime_values.empty:
            logger.error("The following rows could not be converted to datetime:")
            logger.error(df[df["date_published"].isna()])

        df = df.dropna(subset=["date_published"])

        if not pd.api.types.is_datetime64_any_dtype(df["date_published"]):
            logger.error("Error: 'date_published' is still not in datetime format after handling.")
        else:
            logger.debug("Date_published successfully converted to datetime format.")

        for index, row in df.iterrows():
            if pd.isna(row["date_published"]):  # Check if conversion resulted in NaT
                logger.error(
                    f"Row {index} with date_published value '{row['date_published']}' could not be converted."
                )
            if not isinstance(row["date_published"], pd.Timestamp):
                logger.error(row)

        df.drop_duplicates(subset=["cve_id", "date_published"], inplace=True)

        data_dict = df.to_dict("records")
        for cve in data_dict:
            self._output_repository.save(cve)
