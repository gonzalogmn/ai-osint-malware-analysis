import pandas as pd

from config.logger import logger
from src.model.cve_repository import CVERepository

MALWARE_TYPES = {
    "virus": [
        "virus",
        "infection",
        "infect",
        "infects",
        "infected",
        "replication",
        "replicate",
        "replicates",
    ],
    "worm": ["worm"],
    "trojan": ["trojan"],
    "adware": ["adware"],
    "rootkit": ["rootkit"],
    "ransomware": ["ransomware"],
    "keylogger": ["keylogger"],
    "bot": ["bot"],
    "spyware": ["spyware"],
    "phishing": ["phishing"],
    "fileless_malware": ["fileless"],
    "mobile_malware": ["mobile"],
    "wiper_malware": ["wiper"],
}


class FillMalwareTypeFrom:
    def __init__(
        self, input_repository: CVERepository, output_repository: CVERepository, from_column: str
    ):
        self._input_repository = input_repository
        self._output_repository = output_repository
        self._from_column = from_column

    def _determine_malware_type(self, row, column):
        if pd.isna(row[column]):
            return "unknown"

        description = row[column].lower()
        for malware_type, keywords in MALWARE_TYPES.items():
            for keyword in keywords:
                if keyword in description:
                    return malware_type
        return "unknown"

    def __call__(self):
        logger.info("Starting FillMalwareTypeFrom use case...")
        cves = self._input_repository.find_all()

        df = pd.DataFrame(cves)

        df["malware_type"] = df.apply(
            lambda row: (
                self._determine_malware_type(row, self._from_column)
                if "malware_type" not in row
                or pd.isnull(row["malware_type"])
                or row["malware_type"] == "unknown"
                else row["malware_type"]
            ),
            axis=1,
        )

        data_dict = df.to_dict("records")
        for cve in data_dict:
            self._output_repository.update_malware_type(cve)
