import os
from typing import Any, Dict, List, Optional

from pymongo import MongoClient

from config.logger import logger
from src.model.cve_repository import CVERepository


class MongoDBCVERepository(CVERepository):
    def __init__(self, collection_name: str):
        self._client = MongoClient(os.getenv("REPOSITORY_URL"))
        self._db = self._client[os.getenv("REPOSITORY_DATABASE")]
        self._collection_name = collection_name
        self._collection = self._db[self._collection_name]

        if self._collection_name not in self._db.list_collection_names():
            # Create collection if it doesn't exist
            self._db.create_collection(self._collection_name)
            self._collection.create_index([("cve_id", 1)])
            logger.info(f"Collection '{self._collection_name}' created.")
        else:
            logger.info(f"Collection '{self._collection_name}' already exists.")

    def save(self, cve: Dict[str, Any]) -> None:
        self._collection.update_one({"cve_id": cve["cve_id"]}, {"$setOnInsert": cve}, upsert=True)
        logger.debug(f"Inserted {cve['cve_id']} in {self._collection_name}")

    def update_reference_text(self, cve: Dict[str, Any]) -> None:
        update_document = {"$set": {"reference_text": cve["reference_text"]}}
        existing_cve = self.find_one(cve["cve_id"])
        if existing_cve:
            self._collection.update_one({"cve_id": cve["cve_id"]}, update_document)
        else:
            self.save(cve)
        logger.debug(f"Updated 'reference_text' for {cve['cve_id']} in {self._collection_name}")

    def update_exploit_tag_generated(self, cve: Dict[str, Any]) -> None:
        update_document = {"$set": {"exploit_tag_generated": cve["exploit_tag_generated"]}}
        existing_cve = self.find_one(cve["cve_id"])
        if existing_cve:
            self._collection.update_one({"cve_id": cve["cve_id"]}, update_document)
        else:
            self.save(cve)
        logger.debug(
            f"Updated 'exploit_tag_generated' for {cve['cve_id']} in {self._collection_name}"
        )

    def update_exploit(self, cve: Dict[str, Any]) -> None:
        update_document = {
            "$set": {
                "exploit_id": cve["exploit_id"],
                "exploit_file": cve["exploit_file"],
                "exploit_description": cve["exploit_description"],
                "exploit_date": cve["exploit_date"],
                "exploit_author": cve["exploit_author"],
                "exploit_type": cve["exploit_type"],
                "exploit_platform": cve["exploit_platform"],
                "exploit_port": cve["exploit_port"],
                "exploit_date_updated": cve["exploit_date_updated"],
                "exploit_verified": cve["exploit_verified"],
                "exploit_codes": cve["exploit_codes"],
                "exploit_tag": cve["exploit_tag"],
                "exploit_aliases": cve["exploit_aliases"],
                "exploit_app_url": cve["exploit_app_url"],
                "exploit_src_url": cve["exploit_src_url"],
            }
        }
        existing_cve = self.find_one(cve["cve_id"])
        if existing_cve:
            self._collection.update_one({"cve_id": cve["cve_id"]}, update_document)
        else:
            self.save(cve)
        logger.debug(f"Updated 'exploit' for {cve['cve_id']} in {self._collection_name}")

    def find_all(self) -> List[Dict[str, Any]]:
        cursor = self._collection.find()
        return list(cursor)

    def find_one(self, cve_id: str) -> Optional[Dict[str, Any]]:
        query = {"cve_id": cve_id}
        document = self._collection.find_one(query)
        if document:
            return document
        else:
            return None
